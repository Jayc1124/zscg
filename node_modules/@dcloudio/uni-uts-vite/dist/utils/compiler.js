"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parsePackage = exports.compile = exports.getUtsCompiler = void 0;
const os_1 = __importDefault(require("os"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const execa_1 = __importDefault(require("execa"));
const uni_shared_1 = require("@dcloudio/uni-shared");
const uni_cli_shared_1 = require("@dcloudio/uni-cli-shared");
const shared_1 = require("@vue/shared");
function getUtsCompiler() {
    // eslint-disable-next-line no-restricted-globals
    return require('@dcloudio/uts');
}
exports.getUtsCompiler = getUtsCompiler;
async function compile(filename) {
    if (!process.env.UNI_HBUILDERX_PLUGINS) {
        return;
    }
    const { bundle, UtsTarget } = getUtsCompiler();
    const inputDir = process.env.UNI_INPUT_DIR;
    const outputDir = process.env.UNI_OUTPUT_DIR;
    let time = Date.now();
    await bundle({
        target: UtsTarget.KOTLIN,
        input: {
            root: inputDir,
            filename,
        },
        output: {
            outDir: outputDir,
            package: parsePackage(filename),
            sourceMap: true,
            extname: 'kt',
            imports: ['kotlinx.coroutines.*', 'io.dcloud.uts.runtime.*'],
        },
    });
    console.log('uts compile time: ' + (Date.now() - time) + 'ms');
    const kotlinFile = resolveKotlinFile(filename, inputDir, outputDir);
    if (process.env.NODE_ENV === 'production') {
        // 生产模式下，需要将 kt 文件转移到 src 下
        fs_extra_1.default.mkdirSync(path_1.default.resolve(kotlinFile, '../src'));
        if (fs_extra_1.default.existsSync(kotlinFile)) {
            fs_extra_1.default.moveSync(kotlinFile, path_1.default.resolve(kotlinFile, '../src/index.kt'));
        }
        const kotlinMapFile = kotlinFile + '.map';
        if (fs_extra_1.default.existsSync(kotlinMapFile)) {
            fs_extra_1.default.moveSync(kotlinMapFile, path_1.default.resolve(kotlinFile, '../src/index.map.kt'));
        }
        const copies = ['assets', 'libs', 'res'];
        const moduleDir = path_1.default.dirname(filename);
        const outputModuleDir = path_1.default.dirname(kotlinFile);
        fs_extra_1.default.readdirSync(moduleDir).forEach((file) => {
            if (copies.includes(file)) {
                fs_extra_1.default.copySync(path_1.default.join(moduleDir, file), path_1.default.join(outputModuleDir, file));
            }
        });
    }
    else if (process.env.NODE_ENV === 'development') {
        // 开发模式下，需要生成 dex
        if (fs_extra_1.default.existsSync(kotlinFile)) {
            time = Date.now();
            await compileKotlin(kotlinFile);
            console.log('kotlin compile time: ' + (Date.now() - time) + 'ms');
            const jarFile = resolveJarPath(kotlinFile);
            if (fs_extra_1.default.existsSync(jarFile)) {
                time = Date.now();
                await d8(jarFile);
                console.log('d8 compile time: ' + (Date.now() - time) + 'ms');
                try {
                    fs_extra_1.default.unlinkSync(jarFile);
                    // 短期内先不删除，方便排查问题
                    // fs.unlinkSync(kotlinFile)
                }
                catch (e) { }
                const dexFile = resolveDexFile(jarFile);
                if (fs_extra_1.default.existsSync(dexFile)) {
                    return (0, uni_cli_shared_1.normalizePath)(path_1.default.relative(outputDir, dexFile));
                }
            }
        }
    }
}
exports.compile = compile;
function resolveDexFile(jarFile) {
    return (0, uni_cli_shared_1.normalizePath)(path_1.default.resolve(path_1.default.dirname(jarFile), 'classes.dex'));
}
function resolveKotlinFile(filename, inputDir, outputDir) {
    return path_1.default
        .resolve(outputDir, path_1.default.relative(inputDir, filename))
        .replace(path_1.default.extname(filename), '.kt');
}
function resolveDirs() {
    // eslint-disable-next-line no-restricted-globals
    return require(path_1.default.resolve(process.env.UNI_HBUILDERX_PLUGINS, 'uts-kotlin-compiler'));
}
const resolveKotlinc = (0, uni_shared_1.once)(() => {
    const { kotlinc } = resolveDirs();
    return path_1.default.resolve(kotlinc, 'bin', 'kotlinc' + (os_1.default.platform() === 'win32' ? '.bat' : ''));
});
async function compileKotlin(filename) {
    const kotlinc = resolveKotlinc();
    await (0, execa_1.default)(kotlinc, [filename, '-cp', resolveClassPath(), '-d', resolveJarPath(filename)], {
        stdio: 'inherit',
    });
}
async function d8(filename) {
    const java = resolveJavaPath();
    const d8 = resolveD8Path();
    await (0, execa_1.default)(java, [
        '-cp',
        d8,
        'com.android.tools.r8.D8',
        filename,
        '--no-desugaring',
        '--min-api',
        '19',
        '--output',
        resolveDexPath(filename),
    ], {
        stdio: 'inherit',
    });
}
function resolveDexPath(filename) {
    return path_1.default.dirname(filename);
}
function resolveJarPath(filename) {
    return filename.replace(path_1.default.extname(filename), '.jar');
}
const resolveBuiltInClassPath = (0, uni_shared_1.once)(() => {
    const libDir = resolveDirs().lib;
    return fs_extra_1.default
        .readdirSync(libDir)
        .filter((file) => file.endsWith('.jar'))
        .map((file) => path_1.default.resolve(libDir, file));
});
function resolveClassPath() {
    return resolveBuiltInClassPath().join(os_1.default.platform() === 'win32' ? ';' : ':');
}
const resolveJavaPath = (0, uni_shared_1.once)(() => {
    return path_1.default.resolve(process.env.UNI_HBUILDERX_PLUGINS, 'amazon-corretto', 'bin/java');
});
const resolveD8Path = (0, uni_shared_1.once)(() => {
    const { d8 } = resolveDirs();
    return path_1.default.resolve(d8, 'd8.jar');
});
function parsePackage(filepath) {
    const parts = (0, uni_cli_shared_1.normalizePath)(filepath).split('/');
    const index = parts.findIndex((part) => part === 'uni_modules');
    if (index > -1) {
        return 'uts.modules.' + (0, shared_1.camelize)(parts[index + 1]);
    }
    return '';
}
exports.parsePackage = parsePackage;
